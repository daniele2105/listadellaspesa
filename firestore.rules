rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    function isSharedWith(resource) {
      return request.auth.uid in resource.data.sharedWith;
    }
    
    function hasValidFields(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.keys().hasOnly(allFields);
    }
    
    // Shopping Lists Collection
    match /shoppingLists/{listId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource) || isSharedWith(resource));
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.ownerId &&
        hasValidFields(
          ['name', 'ownerId', 'ownerEmail', 'sharedWith', 'products', 'createdAt'],
          ['updatedAt']
        );
      
      allow update: if isAuthenticated() && 
        (isOwner(resource) || isSharedWith(resource)) &&
        hasValidFields(
          ['name', 'ownerId', 'ownerEmail', 'sharedWith', 'products', 'createdAt'],
          ['updatedAt']
        );
      
      allow delete: if isAuthenticated() && isOwner(resource);
    }
    
    // Users Collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}